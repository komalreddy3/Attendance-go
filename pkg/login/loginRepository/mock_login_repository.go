// Code generated by MockGen. DO NOT EDIT.
// Source: loginRepository/loginRepository.go

// Package loginRepository is a generated GoMock package.
package loginRepository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	loginModels "github.com/komalreddy3/Attendance-go/pkg/login/loginRepository/loginModels"
)

// MockLoginRepo is a mock of LoginRepo interface.
type MockLoginRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRepoMockRecorder
}

// MockLoginRepoMockRecorder is the mock recorder for MockLoginRepo.
type MockLoginRepoMockRecorder struct {
	mock *MockLoginRepo
}

// NewMockLoginRepo creates a new mock instance.
func NewMockLoginRepo(ctrl *gomock.Controller) *MockLoginRepo {
	mock := &MockLoginRepo{ctrl: ctrl}
	mock.recorder = &MockLoginRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRepo) EXPECT() *MockLoginRepoMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockLoginRepo) AuthenticateUser(username, password, userRole string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", username, password, userRole)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockLoginRepoMockRecorder) AuthenticateUser(username, password, userRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockLoginRepo)(nil).AuthenticateUser), username, password, userRole)
}

// CheckCreds mocks base method.
func (m *MockLoginRepo) CheckCreds(username, userRole string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCreds", username, userRole)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCreds indicates an expected call of CheckCreds.
func (mr *MockLoginRepoMockRecorder) CheckCreds(username, userRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCreds", reflect.TypeOf((*MockLoginRepo)(nil).CheckCreds), username, userRole)
}

// CheckRole mocks base method.
func (m *MockLoginRepo) CheckRole(content interface{}) loginModels.UserRoleType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRole", content)
	ret0, _ := ret[0].(loginModels.UserRoleType)
	return ret0
}

// CheckRole indicates an expected call of CheckRole.
func (mr *MockLoginRepoMockRecorder) CheckRole(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRole", reflect.TypeOf((*MockLoginRepo)(nil).CheckRole), content)
}
