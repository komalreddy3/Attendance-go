// Code generated by MockGen. DO NOT EDIT.
// Source: loginServices/loginServices.go

// Package loginServices is a generated GoMock package.
package loginServices

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	loginModels "github.com/komalreddy3/Attendance-go/pkg/login/loginRepository/loginModels"
)

// MockLoginService is a mock of LoginService interface.
type MockLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServiceMockRecorder
}

// MockLoginServiceMockRecorder is the mock recorder for MockLoginService.
type MockLoginServiceMockRecorder struct {
	mock *MockLoginService
}

// NewMockLoginService creates a new mock instance.
func NewMockLoginService(ctrl *gomock.Controller) *MockLoginService {
	mock := &MockLoginService{ctrl: ctrl}
	mock.recorder = &MockLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginService) EXPECT() *MockLoginServiceMockRecorder {
	return m.recorder
}

// AuthenticateRole mocks base method.
func (m *MockLoginService) AuthenticateRole(cookie *http.Cookie, check string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateRole", cookie, check)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuthenticateRole indicates an expected call of AuthenticateRole.
func (mr *MockLoginServiceMockRecorder) AuthenticateRole(cookie, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateRole", reflect.TypeOf((*MockLoginService)(nil).AuthenticateRole), cookie, check)
}

// Login mocks base method.
func (m *MockLoginService) Login(username, password, userRole string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, userRole)
	ret0, _ := ret[0].(string)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockLoginServiceMockRecorder) Login(username, password, userRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginService)(nil).Login), username, password, userRole)
}

// NewJWT mocks base method.
func (m *MockLoginService) NewJWT(PrivateKey, PublicKey []byte) loginModels.JWT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWT", PrivateKey, PublicKey)
	ret0, _ := ret[0].(loginModels.JWT)
	return ret0
}

// NewJWT indicates an expected call of NewJWT.
func (mr *MockLoginServiceMockRecorder) NewJWT(PrivateKey, PublicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWT", reflect.TypeOf((*MockLoginService)(nil).NewJWT), PrivateKey, PublicKey)
}
