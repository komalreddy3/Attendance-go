// Code generated by MockGen. DO NOT EDIT.
// Source: attendanceRepository/attendanceRepository.go

// Package attendanceRepository is a generated GoMock package.
package attendanceRepository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	attendanceModels "github.com/komalreddy3/Attendance-go/pkg/attendance/attendanceRepository/attendanceModels"
)

// MockAttendanceRepo is a mock of AttendanceRepo interface.
type MockAttendanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepoMockRecorder
}

// MockAttendanceRepoMockRecorder is the mock recorder for MockAttendanceRepo.
type MockAttendanceRepoMockRecorder struct {
	mock *MockAttendanceRepo
}

// NewMockAttendanceRepo creates a new mock instance.
func NewMockAttendanceRepo(ctrl *gomock.Controller) *MockAttendanceRepo {
	mock := &MockAttendanceRepo{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepo) EXPECT() *MockAttendanceRepoMockRecorder {
	return m.recorder
}

// AddAttendance mocks base method.
func (m *MockAttendanceRepo) AddAttendance(userid string, currentDate time.Time, newAttendanceID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttendance", userid, currentDate, newAttendanceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttendance indicates an expected call of AddAttendance.
func (mr *MockAttendanceRepoMockRecorder) AddAttendance(userid, currentDate, newAttendanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttendance", reflect.TypeOf((*MockAttendanceRepo)(nil).AddAttendance), userid, currentDate, newAttendanceID)
}

// CreatePunchIn mocks base method.
func (m *MockAttendanceRepo) CreatePunchIn(userID string, currentDate time.Time, attendanceID int, className string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePunchIn", userID, currentDate, attendanceID, className)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePunchIn indicates an expected call of CreatePunchIn.
func (mr *MockAttendanceRepoMockRecorder) CreatePunchIn(userID, currentDate, attendanceID, className interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePunchIn", reflect.TypeOf((*MockAttendanceRepo)(nil).CreatePunchIn), userID, currentDate, attendanceID, className)
}

// FetchAttendance mocks base method.
func (m *MockAttendanceRepo) FetchAttendance(day, month, year int) []attendanceModels.Attendance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAttendance", day, month, year)
	ret0, _ := ret[0].([]attendanceModels.Attendance)
	return ret0
}

// FetchAttendance indicates an expected call of FetchAttendance.
func (mr *MockAttendanceRepoMockRecorder) FetchAttendance(day, month, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttendance", reflect.TypeOf((*MockAttendanceRepo)(nil).FetchAttendance), day, month, year)
}

// FetchAttendanceofUser mocks base method.
func (m *MockAttendanceRepo) FetchAttendanceofUser(id string, month, year int) []attendanceModels.Attendance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAttendanceofUser", id, month, year)
	ret0, _ := ret[0].([]attendanceModels.Attendance)
	return ret0
}

// FetchAttendanceofUser indicates an expected call of FetchAttendanceofUser.
func (mr *MockAttendanceRepoMockRecorder) FetchAttendanceofUser(id, month, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttendanceofUser", reflect.TypeOf((*MockAttendanceRepo)(nil).FetchAttendanceofUser), id, month, year)
}

// FetchClassMapPunch mocks base method.
func (m *MockAttendanceRepo) FetchClassMapPunch(id int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClassMapPunch", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// FetchClassMapPunch indicates an expected call of FetchClassMapPunch.
func (mr *MockAttendanceRepoMockRecorder) FetchClassMapPunch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClassMapPunch", reflect.TypeOf((*MockAttendanceRepo)(nil).FetchClassMapPunch), id)
}

// FetchDay mocks base method.
func (m *MockAttendanceRepo) FetchDay(id int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDay", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// FetchDay indicates an expected call of FetchDay.
func (mr *MockAttendanceRepoMockRecorder) FetchDay(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDay", reflect.TypeOf((*MockAttendanceRepo)(nil).FetchDay), id)
}

// FetchPunch mocks base method.
func (m *MockAttendanceRepo) FetchPunch(id int) []attendanceModels.PunchInOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPunch", id)
	ret0, _ := ret[0].([]attendanceModels.PunchInOut)
	return ret0
}

// FetchPunch indicates an expected call of FetchPunch.
func (mr *MockAttendanceRepoMockRecorder) FetchPunch(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPunch", reflect.TypeOf((*MockAttendanceRepo)(nil).FetchPunch), id)
}

// HasAttendance mocks base method.
func (m *MockAttendanceRepo) HasAttendance(userid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAttendance", userid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasAttendance indicates an expected call of HasAttendance.
func (mr *MockAttendanceRepoMockRecorder) HasAttendance(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAttendance", reflect.TypeOf((*MockAttendanceRepo)(nil).HasAttendance), userid)
}

// PunchOut mocks base method.
func (m *MockAttendanceRepo) PunchOut(userID string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PunchOut", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PunchOut indicates an expected call of PunchOut.
func (mr *MockAttendanceRepoMockRecorder) PunchOut(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunchOut", reflect.TypeOf((*MockAttendanceRepo)(nil).PunchOut), userID, id)
}

// PunchOutCheck mocks base method.
func (m *MockAttendanceRepo) PunchOutCheck(userid string, classid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PunchOutCheck", userid, classid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PunchOutCheck indicates an expected call of PunchOutCheck.
func (mr *MockAttendanceRepoMockRecorder) PunchOutCheck(userid, classid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PunchOutCheck", reflect.TypeOf((*MockAttendanceRepo)(nil).PunchOutCheck), userid, classid)
}

// UpdatePunchOut mocks base method.
func (m *MockAttendanceRepo) UpdatePunchOut(attedid, classid int, currentDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePunchOut", attedid, classid, currentDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePunchOut indicates an expected call of UpdatePunchOut.
func (mr *MockAttendanceRepoMockRecorder) UpdatePunchOut(attedid, classid, currentDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePunchOut", reflect.TypeOf((*MockAttendanceRepo)(nil).UpdatePunchOut), attedid, classid, currentDate)
}
