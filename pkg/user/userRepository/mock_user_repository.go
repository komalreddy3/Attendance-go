// Code generated by MockGen. DO NOT EDIT.
// Source: userRepository/userRepository.go

// Package userRepository is a generated GoMock package.
package userRepository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	userModels "github.com/komalreddy3/Attendance-go/pkg/user/userRepository/userModels"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckEnrollment mocks base method.
func (m *MockUserRepo) CheckEnrollment(userid, class string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEnrollment", userid, class)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEnrollment indicates an expected call of CheckEnrollment.
func (mr *MockUserRepoMockRecorder) CheckEnrollment(userid, class interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEnrollment", reflect.TypeOf((*MockUserRepo)(nil).CheckEnrollment), userid, class)
}

// CheckPunchOut mocks base method.
func (m *MockUserRepo) CheckPunchOut(userid string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPunchOut", userid)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPunchOut indicates an expected call of CheckPunchOut.
func (mr *MockUserRepoMockRecorder) CheckPunchOut(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPunchOut", reflect.TypeOf((*MockUserRepo)(nil).CheckPunchOut), userid)
}

// ClassMappingTeacher mocks base method.
func (m *MockUserRepo) ClassMappingTeacher(classname []string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassMappingTeacher", classname)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassMappingTeacher indicates an expected call of ClassMappingTeacher.
func (mr *MockUserRepoMockRecorder) ClassMappingTeacher(classname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassMappingTeacher", reflect.TypeOf((*MockUserRepo)(nil).ClassMappingTeacher), classname)
}

// FetchClass mocks base method.
func (m *MockUserRepo) FetchClass(enrolledClass string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchClass", enrolledClass)
	ret0, _ := ret[0].(int)
	return ret0
}

// FetchClass indicates an expected call of FetchClass.
func (mr *MockUserRepoMockRecorder) FetchClass(enrolledClass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchClass", reflect.TypeOf((*MockUserRepo)(nil).FetchClass), enrolledClass)
}

// FetchStudent mocks base method.
func (m *MockUserRepo) FetchStudent(userid string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStudent", userid)
	ret0, _ := ret[0].(string)
	return ret0
}

// FetchStudent indicates an expected call of FetchStudent.
func (mr *MockUserRepoMockRecorder) FetchStudent(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStudent", reflect.TypeOf((*MockUserRepo)(nil).FetchStudent), userid)
}

// FetchUser mocks base method.
func (m *MockUserRepo) FetchUser(role string) []userModels.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", role)
	ret0, _ := ret[0].([]userModels.User)
	return ret0
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockUserRepoMockRecorder) FetchUser(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockUserRepo)(nil).FetchUser), role)
}

// InsertClass mocks base method.
func (m *MockUserRepo) InsertClass(className string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClass", className)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertClass indicates an expected call of InsertClass.
func (mr *MockUserRepoMockRecorder) InsertClass(className interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClass", reflect.TypeOf((*MockUserRepo)(nil).InsertClass), className)
}

// InsertClassMap mocks base method.
func (m *MockUserRepo) InsertClassMap(id string, classId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClassMap", id, classId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertClassMap indicates an expected call of InsertClassMap.
func (mr *MockUserRepoMockRecorder) InsertClassMap(id, classId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClassMap", reflect.TypeOf((*MockUserRepo)(nil).InsertClassMap), id, classId)
}

// InsertingStudent mocks base method.
func (m *MockUserRepo) InsertingStudent(id, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertingStudent", id, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertingStudent indicates an expected call of InsertingStudent.
func (mr *MockUserRepoMockRecorder) InsertingStudent(id, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertingStudent", reflect.TypeOf((*MockUserRepo)(nil).InsertingStudent), id, username, password)
}

// InsertingTeacher mocks base method.
func (m *MockUserRepo) InsertingTeacher(id, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertingTeacher", id, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertingTeacher indicates an expected call of InsertingTeacher.
func (mr *MockUserRepoMockRecorder) InsertingTeacher(id, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertingTeacher", reflect.TypeOf((*MockUserRepo)(nil).InsertingTeacher), id, username, password)
}
